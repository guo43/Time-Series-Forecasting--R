install.packages(fpp2)
library(fpp2)
install.packages(fpp2)
load(fpp2)
install.packages("fpp2")
library("fpp2")
melsyd.head()
print(melsyd)
install.packages("ggplot2")
library("fpp2)
autoplot(melsyd[,"Economy.Class])
autoplot(melsyd[,"Economy.Class"])
autoplot(melsyd[,"Economy.Class"])
library("ggplot2", lib.loc="~/anaconda3/lib/R/library")
install.packages("fpp2")
library("fpp2")
install.packages(c("BH", "bindr", "bindrcpp", "bit", "blob", "broom", "callr", "caret", "caTools", "clipr", "cluster", "config", "curl", "CVST", "data.table", "DBI", "dbplyr", "ddalpha", "digest", "dplyr", "DRR", "evaluate", "forcats", "foreign", "ggplot2", "glmnet", "glue", "haven", "hexbin", "highr", "hms", "htmlwidgets", "httpuv", "IRdisplay", "iterators", "kernlab", "knitr", "lava", "lubridate", "maps", "MASS", "Matrix", "mgcv", "miniUI", "modelr", "mongolite", "munsell", "nlme", "odbc", "openssl", "packrat", "pbdZMQ", "pillar", "plogr", "prodlim", "profvis", "psych", "purrr", "quantmod", "randomForest", "Rcpp", "RcppRoll", "RCurl", "readxl", "recipes", "repr", "reprex", "rJava", "RJDBC", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "rsconnect", "selectr", "sfsmisc", "shiny", "sourcetools", "sparklyr", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "timeDate", "TTR", "utf8", "viridisLite", "withr", "xml2", "xts", "yaml", "zoo"))
install.packages(c("httpuv", "maps", "openssl", "pbdZMQ", "RCurl", "rJava", "shiny", "stringi", "stringr"))
install.packages(c("httpuv", "maps", "openssl", "pbdZMQ", "RCurl", "rJava", "shiny", "stringi", "stringr"))
install.packages(c("httpuv", "maps", "openssl", "pbdZMQ", "RCurl", "rJava", "shiny", "stringi", "stringr"))
install.packages("fpp2")
library("fpp2")
library(fpp2)
install.packages(fpp2)
install.packages("fpp2")
install.packages("fpp2")
library(fpp2)
install.packages(c("foreign", "survival"))
install.packages("fpp2")
plot(cars)
library(fpp2)
melsyd.head()
head(melsyd)
head(melsyd$Economy.class)
head(melsyd)
library(fpp2)
head(melsyd)
library(fpp2)
head(melsyd)
head(a10)
a10
help("ggseasonplot")
help("ggseasonplot")
library(fpp2)
autoplot(elecdemand[,c("Demand","Temperature")])
autoplot(elecdemand[,c("Demand","Temperature")],facets=TRUE)
autoplot(elecdemand[,c("Demand","Temperature")],facets=FALSE)
help("autoplot")
help("autoplot")
help(facets)
??facets
autoplot(elecdemand[,c("Demand","Temperature")],facets=FALSE) +
ylab("")
autoplot(elecdemand[,c("Demand","Temperature")],facets=TRUE) +
ylab("")
autoplot(elecdemand[,c("Demand","Temperature")],facets=TRUE) +
autoplot(elecdemand[,c("Demand","Temperature")],facets=TRUE)
library(fpp2)
library(fpp2)
library(fpp2)
head(milk)
milk
monthdays(milk)
head(ausbeer)
??tslm
heap(tslm)
help(tslm)
library(fpp2)
library(fpp2)
head
head(visnights)
abc <- ts(5 + matrix(sort(rnorm(1600)), ncol = 16, nrow = 100))
sex <- rep(c("female", "male"), each = 8)
state <- rep(c("NSW", "VIC", "QLD", "SA", "WA", "NT", "ACT", "TAS"), 2)
sex
state
gc <- rbind(sex, state)  # a matrix consists of strings.
gc
x <- gts(abc, groups = gc)
library(hts)
library(gts)
x <- gts(abc, groups = gc)
x
x
abc
abc <- ts(5 + matrix(sort(rnorm(1600)), ncol = 16, nrow = 100))
abc
View(abc)
abc <- ts(5 + matrix(sort(rnorm(1600)), ncol = 16, nrow = 100))
sex <- rep(c("female", "male"), each = 8)
state <- rep(c("NSW", "VIC", "QLD", "SA", "WA", "NT", "ACT", "TAS"), 2)
gc <- rbind(sex, state)  # a matrix consists of strings.
x <- gts(abc, groups = gc)
head(abc)
head(x)
library(dplyr)
library(fpp2)
library(stringr)
library(seasonal)
# import files in to R
setwd("/Users/qingguo/Desktop/1C_Company/Data")
fnames = dir(getwd(), full.names = FALSE)
data_list = sapply(fnames, read.csv, simplify = FALSE) %>% sapply(as.data.frame)
# batch name dataset as its file names
vnames = str_sub(fnames, 1, -5)
for ( i in 1:length(vnames)) {
assign(vnames[[i]], data_list[[i]])
}
# preprocesing data
sales_train = merge(sales_train, select(items,-item_name), by.x = "item_id", by.y = "item_id", all.x = TRUE)
sales_train$date = as.Date(sales_train$date, "%d.%m.%Y")
sales_train = arrange(sales_train,date)
View(abc)
View(x)
head(x)
View(sales_train)
